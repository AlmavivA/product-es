<%
/*
 *  Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */

/**
 *  Contains endpoints related to challenge question
 */

var action = request.getParameter('action'),
        username = session.get('username'),
        confirmationKey = session.get('confirmation'),
        questionId = session.get('question-id'),
        answer = request.getParameter('answer'),
        log = new Log('challenge_api'),
        res = {};

var errorProcessor = require('/modules/error_api.js');

(function () {
    var recoveryModule = require('account-management').recovery;

    /**
     * Verify the answer to the challenge
     *
     * @param username user name
     * @param confirmation confirmation code from previous step
     * @param questionId challenge question id
     * @param answer user answer
     * @return success status
     */
    var verifyChallenge = function (username, confirmation, questionId, answer) {
        var verificationBean = recoveryModule.verifyChallenge(username, confirmation, questionId, answer);
        if (verificationBean) {
            if (verificationBean.isVerified()) {
                session.put('confirmation', verificationBean.getKey());
                res.error = 'false';
                res.msg = 'Challenge answer verified';
            } else {
                res.error = 'true';
                var error = verificationBean.getError();
                res.msg = errorProcessor.getErrorMessage(error);
            }
        } else {
            res.error = 'true';
            res.msg = 'Recovery failed';
        }
        print(res);
    };

    if (action == 'verifyChallenge') {
        verifyChallenge(username, confirmationKey, questionId, answer);
    } else {
        log.error('Endpoint does not exist');
    }

}());

%>

