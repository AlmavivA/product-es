<%
/*
 *  Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */

/**
 *  Contains endpoints related to user
 */

var action = request.getParameter('action'),
    username = request.getParameter('username'),
    captchaKey = request.getParameter('captcha-key'),
    captchaPath = request.getParameter('captcha-path'),
    captchaAnswer = request.getParameter('captcha-answer'),
    recoveryOption = request.getParameter('recovery-option'),
    log = new Log('user_api'),
    res = {};

var EMAIL_RECOVERY = 'email';
var errorProcessor = require('/modules/error_api.js');

(function () {
    var recoveryModule = require('account-management').recovery;

    /**
     * Verify user
     *
     * @param username user name
     * @param captchaPath path of the captcha image
     * @param captchaKey key related to the captcha
     * @param captchaAnswer user answer
     * @return success status
     */
    var verifyUser = function (username, captchaPath, captchaKey, captchaAnswer) {
        if (!username || !captchaAnswer) {
            res.error = 'true';
            res.msg = 'Username or captcha answer is invalid';
            print(res);
        } else {
            var captchaBean = recoveryModule.createCaptchaInfoBean(captchaPath, captchaKey, captchaAnswer);
            var verificationBean = recoveryModule.verifyUser(username, captchaBean);
            if(verificationBean){
                var key = verificationBean.getKey();
                var isVerified = verificationBean.isVerified();
                if (isVerified) {
                    recover(username, key);
                } else {
                    var error = verificationBean.getError();
                    var errorMsg = errorProcessor.getErrorMessage(error);
                    res.error = 'true';
                    res.msg = errorMsg;
                    print(res);
                }
            }else{
                res.error = 'true';
                res.msg = 'Recovery failed';
                print(res);
            }
        }
    };

    /**
     * Recover the password using the specified method
     *
     * @param username user name
     * @param confirmation confirmation code from the previous step
     * @return success status
     */
    var recover = function (username, confirmation) {
        var result;
        if (recoveryOption == 'email') {
            result = recoveryModule.sendRecoveryNotification(username, confirmation, EMAIL_RECOVERY);
            if (result) {
                session.put('username', username);
                res.error = 'false';
                res.msg = 'User successfully verified';
            } else {
                res.error = 'true';
                res.msg = 'Recovery failed';
            }
        } else if (recoveryOption == 'challenge') {
            res.error = 'false';
            res.msg = 'User successfully verified';
            session.put('confirmation', confirmation);
            session.put('username', username);
        }
        print(res);
    };

    if(action == 'verifyUser') {
        verifyUser(username, captchaPath, captchaKey, captchaAnswer);
    } else {
        log.error('Endpoint does not exist');
    }
}());

%>