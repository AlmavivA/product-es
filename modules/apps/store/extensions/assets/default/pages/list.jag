<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
var caramel;
var DEFAULT_PAGIN = {
    'start': 0,
    'count': 20,
    'sortOrder': 'DESC',
    'sortBy': 'overview_createdtime',
    //'paginationLimit': 100
};
require('/modules/store.js').exec(function(ctx) {
    caramel = require('caramel');
    var asset = require('rxt').asset;
    var core=require('rxt').core;
    var ui = require('rxt').ui;
    var constants=require('rxt').constants;
    var log = ctx.log;
    var query = ctx.params.query;
    var store = ctx.store;
    var user = ctx.user;
    var am;
    var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
    var options = uriMatcher.match('/{context}/asts/{type}/{pageName}');
    var type = options.type;
    var assets = [];
    var q = ctx.request.getParameter('q');
    var sortBy = ctx.request.getParameter('sortBy');
    var sortOrder = ctx.request.getParameter('sort');
    var start = ctx.request.getParameter('start');
    var count = ctx.request.getParameter('count');
    //var sortOrder = ctx.request.getParameter('sortOrder');
    var page = ui.buildPage(ctx.session, ctx.request);
    var output = {};
    var tag = ctx.request.getParameter('tag');
    var assetApi=require('/modules/asset_api.js').api;
    var subscriptionApi=require('/modules/subscriptions_api.js').api;

    var ratingApi=require('/modules/rating_api.js').api;
    DEFAULT_PAGIN.sortBy = (sortBy || constants.DEFAULT_ASSET_PAGIN.sortBy);
    DEFAULT_PAGIN.sortOrder = (sortOrder || constants.DEFAULT_ASSET_PAGIN.sortOrder);
    DEFAULT_PAGIN.start = (start || constants.DEFAULT_ASSET_PAGIN.start);
    DEFAULT_PAGIN.count = (count || constants.DEFAULT_ASSET_PAGIN.count);

    var context=core.createAssetContext(ctx.session,type);
    //Determine the type of asset manager to be created
    if (!user) {
        am = asset.createAnonAssetManager(ctx.session, type, -1234);
    } else {
        am = asset.createUserAssetManager(ctx.session, type);
    }
    if (tag) {
        assets = am.tagged(tag);
    } else if (q) {
        var qString = '{' + q + '}';
        //log.info('q: '+qString);
        var query = parse(qString);
        //log.info('query: '+stringify(query));
        assets = am.search(query, DEFAULT_PAGIN);
    } else {
        assets = am.search(null, DEFAULT_PAGIN);
    }
    //Add subscription details to the assets
    subscriptionApi.addSubscriptionDetails(assets,am,ctx.session);
    ratingApi.addRatings(assets,am,context.tenantId,context.username);
    var output = am.render(assets, page).list();
    output.paging=assetApi.assetsPaging(assets,type,ctx.request);
    caramel.render(output);
}, request, response, session); %>