<% require('/modules/publisher.js').exec(function(ctx) {
    var log = new Log();
    var res = ctx.response;
    var req = ctx.request;
    var session = ctx.session;
    var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
    var CREATE_URL = '/{context}/asts/{type}/api/assets';
    var UPDATE_URL = '/{context}/asts/{type}/api/assets/{id}';
    var method = request.getMethod();
    var createAsset = function(options, req, res, session) {
        var asset = require('rxt').asset;
        var am = asset.createUserAssetManager(session, options.type);
        var assetReq = req.getAllParameters('UTF-8');
        var asset = am.importAssetFromHttpRequest(assetReq);

        try{
            am.create(asset);
        }
        catch(e){
            log.error('Asset of type: '+options.type+' was not created due to '+e);
            res.sendError(500,'Failed to create asset of type: '+options.type);
            return;
        } 

        var isLcAttached = am.attachLifecycle(asset);
        //Check if the lifecycle was attached
        if (isLcAttached) {
            var synched = am.synchAsset(asset);
            if (synched) {
                am.invokeDefaultLcAction(asset);
                log.info('Finished invoking default action');
            } else {
                log.warn('Failed to invoke default action as the asset could not be synched.')
            }
        }
    };
    var updateAsset = function(options, req, res, session) {
        var asset = require('rxt').asset;
        var am = asset.createUserAssetManager(session, options.type);
        var assetReq = req.getAllParameters('UTF-8');
        var asset = am.importAssetFromHttpRequest(assetReq);
        asset.id = options.id;
        am.update(asset);
    };
    if (method == 'POST') {
        //Determine whether it is a create or update operation
        if (uriMatcher.match(CREATE_URL)) {
            options = uriMatcher.elements();
            createAsset(options, req, res, session)
        } else if (uriMatcher.match(UPDATE_URL)) {
            options = uriMatcher.elements();
            updateAsset(options, req, res, session);
        }
    } else {
        res.sendError(404, 'Unable to locate endpoint');
    }
}, request, response, session); %>