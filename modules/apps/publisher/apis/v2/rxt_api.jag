<%

require('/modules/publisher.js').exec(function(ctx) {
    var log = new Log();

    
    var ref = require('utils').request;
    var responseProcessor = require('utils').response;

  
    var rxtCore = require('rxt').core;
    var lcCore = require('lifecycle').core;
    
    
    var server = require('store').server;
    var res = ctx.response;
    var req = ctx.request;
    var session = ctx.session;
    var tenantId = server.current(session).tenantId;
    var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
    
    var GET_RXTS_URL = '/{context}/apis/rxt/list';
    var GET_RXT_DEFINITION_BY_RXT_URL = '/{context}/apis/rxt/{rxtName}';
    var GET_RXT_FIELDS_BY_TYPE_URL = '/{context}/apis/rxt/{rxtType}/{type}';
    
    var method = req.getMethod();
    var options = ref.getQueryOptions(req.getQueryString());
    response.contentType = 'application/json';
    var manager=rxtCore.rxtManager(tenantId);

    switch (method) {
        case 'GET':
            if (uriMatcher.match(GET_RXT_FIELDS_BY_TYPE_URL)) {

                try {

                    var rxtType = uriMatcher.elements().rxtType;
                    var type = uriMatcher.elements().type;

                    var rxtFieldList = manager.listRxtFieldsOfType(rxtType,type );
                    response = responseProcessor.buildSuccessResponseForRxt(response, 200, rxtFieldList);

                } catch (e) {
                    log.error(e);
                    response = responseProcessor.buildErrorResponse(response, 404, e);
                }
            }else if(uriMatcher.match(GET_RXTS_URL)){
                    var rxtList = manager.listRxtTypes();
                    response = responseProcessor.buildSuccessResponseForRxt(response, 200, rxtList);

            }else {
                response = responseProcessor.buildErrorResponse(response, 404, 'Unable to locate this GET endpoint');
            }
            break;
        default:
            response = responseProcessor.buildErrorResponse(response, 404, 'Unable to locate this endpoint for ' + method)
    }
}, request, response, session); 

%>
